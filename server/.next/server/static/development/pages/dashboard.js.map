{"version":3,"file":"static/development/pages/dashboard.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/Login.js","webpack:///./components/dashboard/BioCard.js","webpack:///./components/dashboard/Controller.js","webpack:///./components/dashboard/ImageCard.js","webpack:///./components/dashboard/LinksCard.js","webpack:///./components/dashboard/Profile.js","webpack:///./components/dashboard/ProjectCard.js","webpack:///./components/dashboard/Projects.js","webpack:///./components/dashboard/SkillsCard.js","webpack:///./helpers/setAuthToken.js","webpack:///./pages/dashboard.js","webpack:///./reduxState/actions/authActions.js","webpack:///./reduxState/actions/homePageActions.js","webpack:///./reduxState/actions/types.js","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"axios\"","webpack:///external \"cloudinary-react\"","webpack:///external \"jwt-decode\"","webpack:///external \"lodash.isempty\"","webpack:///external \"next/router\"","webpack:///external \"react\"","webpack:///external \"react-redux\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Router from 'next/router';\nimport { login } from '../reduxState/actions/authActions';\n\nimport '../scss/login.scss';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    // Login state\n    this.state = {\n      username: '',\n      password: '',\n      errors: {}\n    };\n    // Bind these methods to this instance\n    this.onSubmit = this.onSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    // Check if login is needed\n    if (this.props.auth.isAuth) {\n      // Move to dashboard page\n      Router.push('/dashboard');\n    }\n  }\n\n  // Check for new props\n  componentDidUpdate(prevProps) {\n    const { errors } = this.props;\n    // Check for new errors\n    if (prevProps.errors !== errors) {\n      this.setState({ errors });\n    }\n\n    // Current props state\n    const currentIsAuth = this.props.auth.isAuth;\n\n    // Check for change in auth\n    if (currentIsAuth !== prevProps.auth.isAuth) {\n      // Check if user logged in.\n      if (currentIsAuth) {\n        // Redirect to dashboard\n        Router.push('/dashboard');\n      }\n    }\n  }\n\n  // Form submission\n  onSubmit(event) {\n    event.preventDefault();\n\n    // User data\n    const { username, password } = this.state;\n\n    const user = {\n      username,\n      password\n    };\n\n    // Redux Action\n    this.props.login(user);\n  }\n\n  // Changed state when input is detected\n  handleChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  render() {\n    const { username, password, errors } = this.state;\n\n    return (\n      <form className=\"form\" method=\"POST\" onSubmit={this.onSubmit}>\n        <h2 className=\"form__heading\">Login</h2>\n        <fieldset className=\"form__set\">\n          <label htmlFor=\"username\" className=\"form__label\">\n            Username\n            <span className=\"form__error\">{errors.username}</span>\n            <input\n              type=\"text\"\n              name=\"username\"\n              value={username}\n              onChange={this.handleChange}\n              className=\"form__input\"\n            />\n          </label>\n          <label htmlFor=\"password\" className=\"form__label\">\n            Password\n            <span className=\"form__error\">{errors.password || errors.error}</span>\n            <input\n              type=\"password\"\n              name=\"password\"\n              value={password}\n              onChange={this.handleChange}\n              className=\"form__input\"\n            />\n          </label>\n          <button type=\"submit\" value=\"Submit\" className=\" form__button\">\n            Sign in\n          </button>\n        </fieldset>\n      </form>\n    );\n  }\n}\n\n// Add to props from redux state\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(\n  mapStateToProps,\n  { login }\n)(Login);\n","import React, { Component } from 'react';\n// Styles\nimport '../../scss/dashboard/cards.scss';\n\nclass BioCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { bio: '' };\n    this.updateChange = this.updateChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidUpdate() {\n    if (this.props.bioData !== this.state.bio) {\n      // Only update if not currently editing input\n      if (!this.props.isEditable) {\n        // Set inital value\n        this.setState({ bio: this.props.bioData });\n      }\n    }\n  }\n\n  // Update state\n  updateChange(event) {\n    const { value } = event.currentTarget;\n    // Update state to new string value\n    this.setState({ bio: value });\n  }\n\n  // Handle submit of form\n  handleSubmit(event) {\n    event.preventDefault();\n    // Update profile component state\n    this.props.updateProfileState('bio', this.state.bio);\n  }\n\n  render() {\n    const { title } = this.props;\n    return (\n      <div className=\"bio__group\">\n        <form className=\"group__form\" onSubmit={this.handleSubmit}>\n          <label htmlFor={title} className=\"group__form__label\">\n            {title}\n            <textarea\n              rows=\"5\"\n              cols=\"33\"\n              className=\"group__form__textarea\"\n              type=\"text\"\n              name=\"link\"\n              value={this.state.bio}\n              onChange={this.updateChange}\n            />\n          </label>\n          <input className=\"group__submit\" type=\"submit\" value=\"Update Changes\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default BioCard;\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { logout } from '../../reduxState/actions/authActions';\n// Components\nimport Profile from './Profile';\nimport Projects from './Projects';\n// Styles\nimport '../../scss/dashboard/controller.scss';\n\nclass Controller extends Component {\n  constructor(props) {\n    super(props);\n    this.changeSection = this.changeSection.bind(this);\n    this.logout = this.logout.bind(this);\n    this.state = {\n      sectionToRender: 'projects'\n    };\n  }\n\n  // Determine which section to render\n  changeSection(section) {\n    this.setState({\n      sectionToRender: section\n    });\n  }\n\n  // Logout\n  logout() {\n    // Use redux action to logout user.\n    this.props.logout();\n  }\n\n  render() {\n    const { sectionToRender } = this.state;\n    let dashBoardSection;\n\n    switch (sectionToRender) {\n      case 'profile':\n        dashBoardSection = <Profile user={this.props.auth.user} />;\n        break;\n      case 'projects':\n        dashBoardSection = <Projects />;\n        break;\n      default:\n        dashBoardSection = <Profile user={this.props.auth.user} />;\n    }\n\n    return (\n      <Fragment>\n        <nav className=\"dashboard__nav\">\n          <div className=\"nav__buttons__left\">\n            <button\n              className=\"nav__button\"\n              type=\"button\"\n              onClick={() => this.changeSection('profile')}\n            >\n              Profile\n            </button>\n            <button\n              className=\"nav__button\"\n              type=\"button\"\n              onClick={() => this.changeSection('projects')}\n            >\n              Projects\n            </button>\n          </div>\n          <div className=\"nav__buttons__right\">\n            <button\n              className=\"nav__button nav__button--right\"\n              type=\"button\"\n              onClick={() => this.logout()}\n            >\n              Logout\n            </button>\n          </div>\n        </nav>\n        <section className=\"dashboard__content\">{dashBoardSection}</section>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(\n  mapStateToProps,\n  { logout }\n)(Controller);\n","import React, { Component, Fragment } from 'react';\nimport { Image, Transformation } from 'cloudinary-react';\nimport axios from 'axios';\n// Styles\nimport '../../scss/dashboard/cards.scss';\n\nexport default class ImageCard extends Component {\n  constructor(props) {\n    super(props);\n    this.uploadImage = this.uploadImage.bind(this);\n  }\n\n  // Upload image to cloudinary\n  async uploadImage(e) {\n    const { files } = e.target;\n    const data = new FormData();\n    data.append('file', files[0]);\n    // Append websiteImages preset\n    data.append('upload_preset', 'websiteImages');\n\n    // Delete Auth header to prevent cors error\n    delete axios.defaults.headers.common['Authorization'];\n\n    // Send the post request\n    const file = await axios({\n      method: 'POST',\n      url: 'https://api.cloudinary.com/v1_1/jwalkercreations-com/image/upload',\n      data\n    });\n\n    // Grab the image id for react components\n    const imageId = file.data.public_id;\n\n    // Update profile's state with new id\n    this.props.updateProfileState('profileImageId', imageId);\n  }\n\n  render() {\n    const { imageId } = this.props;\n\n    const imageUploader = (\n      <div className=\"image__upload\">\n        <Image cloudName=\"jwalkercreations-com\" publicId={imageId}>\n          <Transformation height=\"150\" quality=\"auto\" crop=\"limit\" fetchFormat=\"auto\" />\n        </Image>\n        <form className=\"image__upload__form\">\n          <input\n            className=\"group__from__input\"\n            type=\"file\"\n            name=\"file\"\n            required\n            onChange={this.uploadImage}\n          />\n        </form>\n      </div>\n    );\n\n    return <Fragment>{imageUploader}</Fragment>;\n  }\n}\n","import React, { Component } from 'react'; // Styles\nimport '../../scss/dashboard/cards.scss';\n\nclass LinksCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { link: '' };\n    this.updateChange = this.updateChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidUpdate() {\n    if (this.props.linkData !== this.state.link) {\n      // Only update if not currently editing input\n      if (!this.props.isEditable) {\n        // Set inital value\n        this.setState({ link: this.props.linkData });\n      }\n    }\n  }\n\n  // Update state\n  updateChange(event) {\n    const { value } = event.currentTarget;\n    // Update state to new string value\n    this.setState({ link: value });\n  }\n\n  // Handle submit of form\n  handleSubmit(event) {\n    event.preventDefault();\n    // Update profile component state\n    this.props.updateProfileState(this.props.linkType, this.state.link);\n  }\n\n  render() {\n    const { title } = this.props;\n\n    return (\n      <div className=\"link__group\">\n        <form className=\"group__form\" onSubmit={this.handleSubmit}>\n          <label htmlFor={title} className=\"group__form__label\">\n            {title}\n            <input\n              className=\"group__form__input\"\n              type=\"text\"\n              name=\"link\"\n              value={this.state.link}\n              onChange={this.updateChange}\n            />\n          </label>\n          <input className=\"group__submit\" type=\"submit\" value=\"Update Changes\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default LinksCard;\n","import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { getProfileData, setProfileData } from '../../reduxState/actions/homePageActions';\n// Components\nimport SkillsCard from './SkillsCard';\nimport LinksCard from './LinksCard';\nimport BioCard from './BioCard';\nimport ImageCard from './ImageCard';\n// Styles\nimport '../../scss/dashboard/profile.scss';\nimport '../../scss/dashboard/common.scss';\n\nclass Profile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      frontend: [],\n      backend: [],\n      tools: [],\n      knowledge: [],\n      github: '',\n      linkedin: '',\n      email: '',\n      bio: '',\n      profileImageId: ''\n    };\n    this.updateProfileState = this.updateProfileState.bind(this);\n    this.updateServer = this.updateServer.bind(this);\n  }\n\n  componentDidMount() {\n    // Get data from server\n    this.props.getProfileData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.profileData !== prevProps.profileData) {\n      const { frontend, backend, tools, knowledge } = this.props.profileData.skills;\n      const { email, github, linkedin } = this.props.profileData.contactInfo;\n      const { bio, profileImageId } = this.props.profileData;\n      // Update skills from redux store\n      this.updateProfileState('frontend', frontend);\n      this.updateProfileState('backend', backend);\n      this.updateProfileState('tools', tools);\n      this.updateProfileState('knowledge', knowledge);\n      this.updateProfileState('github', github);\n      this.updateProfileState('linkedin', linkedin);\n      this.updateProfileState('email', email);\n      this.updateProfileState('bio', bio);\n      this.updateProfileState('profileImageId', profileImageId);\n    }\n  }\n\n  // This method is passed to children to update this component's state\n  updateProfileState(key, value) {\n    this.setState({\n      [key]: value\n    });\n  }\n\n  // This method takes the latest copy of state and submits a post request with it.\n  updateServer() {\n    // Create payload for action\n    const payload = {\n      frontendskills: this.state.frontend,\n      backendskills: this.state.backend,\n      tools: this.state.tools,\n      knowledge: this.state.knowledge,\n      bio: this.state.bio,\n      github: this.state.github,\n      linkedin: this.state.linkedin,\n      email: this.state.email,\n      profileImageId: this.state.profileImageId\n    };\n\n    // Attach auth header\n    // Image uploads and page redirect remove this header\n    const token = localStorage.getItem('jwtToken');\n\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = token;\n    }\n\n    // Post to server\n    this.props.setProfileData(payload);\n  }\n\n  render() {\n    if (this.props.profileData === null) {\n      return null;\n    }\n\n    // Skills\n    const {\n      frontend,\n      backend,\n      tools,\n      knowledge,\n      github,\n      linkedin,\n      email,\n      bio,\n      profileImageId\n    } = this.state;\n\n    return (\n      <Fragment>\n        <nav className=\"profile__nav\">\n          <div className=\"profile__nav__right\">\n            <button className=\"primary__button\" type=\"button\" onClick={() => this.updateServer()}>\n              Update Server\n            </button>\n          </div>\n        </nav>\n        <section className=\"skills__edit-card\">\n          <h3 className=\"group__title skills__title\">Skills</h3>\n          <SkillsCard\n            skillData={frontend}\n            skillsType=\"frontend\"\n            title=\"Front End Skills\"\n            updateProfileState={this.updateProfileState}\n          />\n          <SkillsCard\n            skillData={backend}\n            skillsType=\"backend\"\n            title=\"Back End Skills\"\n            updateProfileState={this.updateProfileState}\n          />\n          <SkillsCard\n            skillData={tools}\n            skillsType=\"tools\"\n            title=\"Tools\"\n            updateProfileState={this.updateProfileState}\n          />\n          <SkillsCard\n            skillData={knowledge}\n            skillsType=\"knowledge\"\n            title=\"Knowledge\"\n            updateProfileState={this.updateProfileState}\n          />\n        </section>\n        <section className=\"image__edit-card\">\n          <h3 className=\"group__title\">Profile Image</h3>\n          <ImageCard imageId={profileImageId} updateProfileState={this.updateProfileState} />\n        </section>\n        <section className=\"links__edit-card\">\n          <h3 className=\"group__title\">Links</h3>\n          <LinksCard\n            linkData={linkedin}\n            linkType=\"linkedin\"\n            title=\"Linkedin\"\n            updateProfileState={this.updateProfileState}\n          />\n          <LinksCard\n            linkData={github}\n            linkType=\"github\"\n            title=\"Github\"\n            updateProfileState={this.updateProfileState}\n          />\n          <LinksCard\n            linkData={email}\n            linkType=\"email\"\n            title=\"Email\"\n            updateProfileState={this.updateProfileState}\n          />\n        </section>\n        <section className=\"bio__edit-card\">\n          <h3 className=\"group__title\">Bio</h3>\n          <BioCard bioData={bio} title=\"Bio\" updateProfileState={this.updateProfileState} />\n        </section>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  profileData: state.homePageData.profileData\n});\n\nexport default connect(\n  mapStateToProps,\n  { getProfileData, setProfileData }\n)(Profile);\n","import React, { Component, Fragment } from 'react';\n// Styles\nimport '../../scss/dashboard/cards.scss';\nimport '../../scss/dashboard/projects.scss';\n\nexport default class ProjectCard extends Component {\n  constructor(props) {\n    super(props);\n    this.updateCurrentState = this.updateCurrentState.bind(this);\n    this.convertArrayToString = this.convertArrayToString.bind(this);\n    this.convertStringToArray = this.convertStringToArray.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      title: '',\n      type: '',\n      link: '',\n      description: '',\n      imageIds: [],\n      frontend: '',\n      backend: '',\n      tools: '',\n      id: ''\n    };\n  }\n\n  componentDidMount() {\n    this.updateCurrentState(this.props.projectData);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.projectData !== this.props.projectData) {\n      this.updateCurrentState(this.props.projectData);\n    }\n  }\n\n  async updateCurrentState(projectData) {\n    const { title, type, link, description, imageIds, tech, id } = projectData;\n\n    this.setState({ title });\n    this.setState({ type });\n    this.setState({ link });\n    this.setState({ description });\n    this.setState({ id });\n    this.setState({ imageIds });\n\n    // Convert tech arrays to strings for editing\n    const frontendString = await this.convertArrayToString(tech.frontend);\n    const backendString = await this.convertArrayToString(tech.backend);\n    const toolsString = await this.convertArrayToString(tech.tools);\n\n    this.setState({ frontend: frontendString });\n    this.setState({ backend: backendString });\n    this.setState({ tools: toolsString });\n  }\n\n  convertArrayToString(data) {\n    // Check for empty array\n    if (data.length === 0) return '';\n    // Convert the array to a comma separted string\n    const dataString = data.reduce((string, skill) => `${string},${skill}`);\n    // Return string\n    return dataString;\n  }\n\n  convertStringToArray(data) {\n    // Check for empty strin\n    // Convert string to array\n    // Update state if array\n  }\n\n  handleChange(event) {\n    const { name, value } = event.currentTarget;\n    // Update state to new string value\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { title, type, link, description, imageIds, frontend, backend, tools } = this.state;\n\n    if (frontend === undefined) return null;\n\n    return (\n      <Fragment>\n        <div className=\"project__images\">\n          <h3 className=\"group__title\">Images</h3>\n          <p>no images currently</p>\n        </div>\n        <div className=\"project__main\">\n          <h3 className=\"group__title\">Main Details</h3>\n          <label className=\"group__form__label\" htmlFor=\"title\">\n            Title\n            <input\n              className=\"group__form__input\"\n              type=\"text\"\n              name=\"title\"\n              value={title}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label className=\"group__form__label\" htmlFor=\"type\">\n            Type\n            <input\n              className=\"group__form__input\"\n              type=\"text\"\n              name=\"type\"\n              value={type}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label className=\"group__form__label\" htmlFor=\"link\">\n            Link\n            <input\n              className=\"group__form__input\"\n              type=\"text\"\n              name=\"link\"\n              value={link}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label className=\"group__form__label\" htmlFor=\"description\">\n            Description\n            <textarea\n              className=\"group__form__textarea\"\n              rows=\"5\"\n              cols=\"33\"\n              type=\"text\"\n              name=\"description\"\n              value={description}\n              onChange={this.handleChange}\n            />\n          </label>\n        </div>\n        <div className=\"project__tech\">\n          <h3 className=\"group__title\">Tech Details</h3>\n          <label className=\"group__form__label\" htmlFor=\"Frontend Tech\">\n            Front End Tech\n            <input\n              className=\"group__form__input\"\n              type=\"text\"\n              name=\"frontend\"\n              value={frontend}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label className=\"group__form__label\" htmlFor=\"Backend Tech\">\n            Backend Tech\n            <input\n              className=\"group__form__input\"\n              type=\"text\"\n              name=\"backend\"\n              value={backend}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label className=\"group__form__label\" htmlFor=\"Tools\">\n            Tools\n            <input\n              className=\"group__form__input\"\n              type=\"text\"\n              name=\"tools\"\n              value={tools}\n              onChange={this.handleChange}\n            />\n          </label>\n        </div>\n      </Fragment>\n    );\n  }\n}\n","import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport _isEmpty from 'lodash.isempty';\nimport { connect } from 'react-redux';\nimport { getProjectData } from '../../reduxState/actions/homePageActions';\n// Components\nimport ProjectCard from './ProjectCard';\n// Styles\nimport '../../scss/dashboard/projects.scss';\nimport '../../scss/dashboard/common.scss';\n\nclass Projects extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      projects: {},\n      projectToUpdate: ''\n    };\n    this.updateProjectState = this.updateProjectState.bind(this);\n    this.updateProjectState = this.updateProjectState.bind(this);\n    this.updateServer = this.updateServer.bind(this);\n    this.determineButton = this.determineButton.bind(this);\n  }\n\n  componentDidMount() {\n    // Get data from server\n    this.props.getProjectData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.projectData !== prevProps.projectData) {\n      const { projectData } = this.props;\n\n      if (projectData) {\n        // Populate state\n        this.setState({\n          projects: projectData\n        });\n\n        // Check if projectToUpdate value is empty\n        if (this.state.projectToUpdate === '') {\n          // Set projectToUpdate value\n          this.setState({ projectToUpdate: '0' });\n        }\n      }\n    }\n  }\n\n  // Side bar buttons use this method to change active project\n  updateProjectToEdit(e) {\n    const projectNum = e.currentTarget.value;\n    this.setState({ projectToUpdate: projectNum });\n  }\n\n  // This method is passed to each child for updating this state\n  updateProjectState(project) {\n    console.log(`Updating ${this.state.projectToUpdate} to ${project}`);\n\n    // Copy projects\n    // const projects = { ...this.state.projects };\n    // console.log('current projects');\n    // console.log(projects);\n    // // Add new or changes to projects\n    // projects[projectName] = project;\n    // console.log('new change');\n    // console.log(projects);\n    // // Update state\n    // this.setState({ projects });\n    // console.log('After setState');\n    // console.log(this.state.projects);\n  }\n\n  // This method take current project and updates server\n  updateServer() {\n    // Attach auth header\n    // Image uploads and page redirect remove this header\n    const token = localStorage.getItem('jwtToken');\n\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = token;\n    }\n\n    // Pass single project object to action\n    console.log('updating project : ' + this.state.projectToUpdate);\n  }\n\n  // This method returns a button for each project\n  determineButton(projectNum) {\n    const { projectToUpdate } = this.state;\n\n    // Determine which class to apply\n    let buttonClass = 'secondary__button';\n    if (projectToUpdate === projectNum) {\n      buttonClass = 'secondary__button--active';\n    }\n\n    return (\n      <button\n        className={buttonClass}\n        type=\"button\"\n        value={projectNum}\n        key={projectNum}\n        onClick={e => this.updateProjectToEdit(e)}\n      >\n        Project&nbsp;\n        {projectNum}\n      </button>\n    );\n  }\n\n  render() {\n    // Make sure redux state is loaded\n    if (this.props.projectData === null) {\n      return null;\n    }\n    // Make sure current state is filled\n    if (_isEmpty(this.state.projects)) {\n      return null;\n    }\n\n    // Grab the keys name for the sidebar\n    const projectNames = Object.keys(this.state.projects);\n    const { projects, projectToUpdate } = this.state;\n    // Grab the current projectData object\n    const currentProjectData = projects[parseInt(projectToUpdate, 10)];\n\n    return (\n      <Fragment>\n        <nav className=\"project__nav\">\n          <div className=\"project__nav__left\">\n            {projectNames.map(projectNum => this.determineButton(projectNum))}\n          </div>\n          <div className=\"project__nav__right\">\n            <button className=\"primary__button\" type=\"button\" onClick={this.updateServer}>\n              Update Server\n            </button>\n          </div>\n        </nav>\n        <section className=\"project__edit-card\">\n          <ProjectCard\n            projectData={currentProjectData}\n            updateProjectState={this.updateProjectState}\n          />\n        </section>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  projectData: state.homePageData.projectData\n});\n\nexport default connect(\n  mapStateToProps,\n  { getProjectData }\n)(Projects);\n","import React, { Component } from 'react';\nimport _isEmpty from 'lodash.isempty';\n// Styles\nimport '../../scss/dashboard/cards.scss';\nimport '../../scss/dashboard/common.scss';\n\nclass SkillsCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      skills: ''\n    };\n    this.updateChange = this.updateChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.skillData !== this.props.skillData) {\n      if (!_isEmpty(this.props.skillData)) {\n        const { skillData } = this.props;\n        // Reduce array to string\n        const skillString = skillData.reduce((accumulator, skill) => `${accumulator},${skill}`);\n        // Set this string to state for input\n        this.setState({ skills: skillString });\n      }\n    }\n  }\n\n  // Update state\n  updateChange(event) {\n    const { value } = event.currentTarget;\n    // Update state to new string value\n    this.setState({ skills: value });\n  }\n\n  // Handle submit of form\n  handleSubmit(event) {\n    event.preventDefault();\n    // Split skills string into array\n    const skillsString = this.state.skills;\n    const skillsArray = skillsString.split(',');\n    // Update profile component state\n    this.props.updateProfileState(this.props.skillsType, skillsArray);\n  }\n\n  render() {\n    const { title, skillsType } = this.props;\n    return (\n      <div className={`skill__group group__${skillsType}`}>\n        <form className=\"group__form\" onSubmit={this.handleSubmit}>\n          <label htmlFor={title} className=\"group__form__label\">\n            {title}\n            <textarea\n              className=\"group__form__textarea\"\n              rows=\"5\"\n              cols=\"33\"\n              type=\"text\"\n              name=\"skills\"\n              value={this.state.skills}\n              onChange={this.updateChange}\n            />\n          </label>\n          <input className=\"group__submit\" type=\"submit\" value=\"Update Changes\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SkillsCard;\n","import axios from 'axios';\n\nconst setAuthToken = token => {\n  // Check for token to attach\n  if (token) {\n    // Apply to every request\n    axios.defaults.headers.common['Authorization'] = token;\n  } else {\n    // Delete auth header\n    delete axios.defaults.headers.common['Authorization'];\n  }\n};\n\nexport default setAuthToken;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport jwtDecode from 'jwt-decode';\nimport _isEmpty from 'lodash.isempty';\nimport setAuthToken from '../helpers/setAuthToken';\nimport { setCurrentUser } from '../reduxState/actions/authActions';\n// Components\nimport Controller from '../components/dashboard/Controller';\nimport Login from '../components/Login';\n// Styles\nimport '../scss/dashboard/dashboard.scss';\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoggedIn: false\n    };\n  }\n\n  // Check if user is authenticated client side\n  componentDidMount() {\n    console.log('MOUNTED');\n    // Check if token is in local storage\n    if (localStorage.jwtToken) {\n      // Set token to header for requests\n      setAuthToken(localStorage.jwtDecode);\n      // Decode the token for user info\n      const decoded = jwtDecode(localStorage.jwtToken);\n      // Set user\n      this.props.setCurrentUser(decoded);\n    } else {\n      // User should not be here, login should render.\n      this.setState({ isLoggedIn: false });\n    }\n  }\n\n  // Check if user clicked logout\n  componentDidUpdate(prevProps) {\n    console.log('UPDATED');\n    // Check for login or logout event\n    if (this.props.auth.isAuth !== prevProps.auth.isAuth) {\n      // Change loggedin state\n      if (this.props.auth.isAuth) {\n        this.logInOut();\n      } else {\n        this.logInOut();\n      }\n\n      // Check for devtool hack\n      if (_isEmpty(this.props.auth.user)) {\n        // eslint-disable-next-line no-console\n        console.log('Dont do that!!!!');\n        this.logInOut();\n      }\n    }\n\n    // Check for devtool hack\n    if (this.state.isLoggedIn && !this.props.auth.isAuth) {\n      if (_isEmpty(this.props.auth.user)) {\n        // eslint-disable-next-line no-console\n        console.log('Nope !!!!');\n        this.logInOut();\n      }\n    }\n\n    // Check for devtool hack\n    if (this.state.isLoggedIn && this.props.auth.isAuth) {\n      if (_isEmpty(this.props.auth.user)) {\n        // eslint-disable-next-line no-console\n        console.log('Really !!!!');\n        this.logInOut();\n      }\n    }\n\n    // Check token times\n    //! Todo: causes loop\n    // if (localStorage.jwtToken) {\n    //   const token = jwtDecode(localStorage.jwtToken);\n    //   const currentTime = Date.now() / 1000;\n    //   const expireTime = token.exp;\n    //   if (currentTime > expireTime) {\n    //     console.log('Time expired');\n    //     this.logInOut();\n    //   }\n    // }\n  }\n\n  // Switch state for rendering\n  logInOut() {\n    this.setState(prevState => ({ isLoggedIn: !prevState.isLoggedIn }));\n  }\n\n  render() {\n    const { isLoggedIn } = this.state;\n\n    if (isLoggedIn) {\n      return (\n        <div className=\"dashboard-wrapper\">\n          <Controller />\n        </div>\n      );\n    }\n    return (\n      <div className=\"dashboard__login__wrapper\">\n        <Login />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(\n  mapStateToProps,\n  { setCurrentUser }\n)(Dashboard);\n","import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\n\nimport actions from './types';\nimport setAuthToken from '../../helpers/setAuthToken';\n\n// Set the current user data\nexport const setCurrentUser = tokenData => {\n  // Send data to the store\n  return {\n    type: actions.SET_CURRENT_USER,\n    payload: tokenData\n  };\n};\n\n// Login in user and store token\nexport const login = userData => dispatch => {\n  axios\n    .post('/login', userData)\n    .then(res => {\n      // Save token to localStorage\n      const { token } = res.data;\n      localStorage.setItem('jwtToken', token);\n      // Set token to auth header\n      setAuthToken(token);\n      // Decode jwt for user data\n      const decoded = jwtDecode(token);\n      // Set user data\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      // Send data to the store\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Log out the user\nexport const logout = () => dispatch => {\n  // Remove token from localStorage\n  localStorage.removeItem('jwtToken');\n  // Remove auth header from requests\n  setAuthToken(false);\n  // Set current user to {}\n  dispatch(setCurrentUser({}));\n};\n","import axios from 'axios';\nimport actions from './types';\n\n// Get project data\nexport const getProfileData = () => dispatch => {\n  // Fetch profile data\n  axios\n    .get('/profile')\n    .then(res =>\n      dispatch({\n        type: actions.GET_PROFILE,\n        payload: res.data\n      })\n    )\n    .catch(err =>\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: { getError: err }\n      })\n    );\n};\n\n// Get project data\nexport const getProjectData = () => dispatch => {\n  // Fetch project data\n  axios\n    .get('/project/all')\n    .then(res =>\n      dispatch({\n        type: actions.GET_PROJECTS,\n        payload: res.data\n      })\n    )\n    .catch(err =>\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: { getError: err }\n      })\n    );\n};\n\n// Send profile data to server\nexport const setProfileData = profileData => dispatch => {\n  // Post profile data\n  axios\n    .post('/profile', profileData)\n    .then(res => res.status)\n    .catch(err =>\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: { postError: err }\n      })\n    );\n};\n","// Actions send payloads of data to the store\n// they describe how data will change\n\nconst actions = {\n  GET_ERRORS: 'GET_ERRORS',\n  SET_CURRENT_USER: 'SET_CURRENT_USER',\n  GET_PROFILE: 'GET_PROFILE',\n  GET_PROJECTS: 'GET_PROJECTS'\n};\n\nexport default actions;\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"axios\");","module.exports = require(\"cloudinary-react\");","module.exports = require(\"jwt-decode\");","module.exports = require(\"lodash.isempty\");","module.exports = require(\"next/router\");","module.exports = require(\"react\");","module.exports = require(\"react-redux\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAVA;AAWA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AAMA;AACA;AACA;AAFA;AACA;AAKA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA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CA;AATA;AAUA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AADA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AACA;AAaA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AAvIA;AACA;AAyIA;AAAA;AACA;AADA;AAAA;AACA;AAGA;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3JA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AANA;AAOA;AACA;;;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AA5DA;AACA;AA8DA;;;;;;;;;;;;ACrEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAFA;AAKA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAhGA;AACA;AAkGA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAIA;AAEA;AAAA;;;;;;;;;;;;ACtHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AAAA;AACA;AAGA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAFA;AAAA;AAOA;AArBA;AACA;AAuBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAFA;AADA;AAMA;AAEA;AACA;AAAA;AAAA;AAFA;AADA;AAMA;AAhBA;AACA;AAkBA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAFA;AADA;AAMA;AAEA;AACA;AAAA;AAAA;AAFA;AADA;AAMA;AAhBA;AACA;AAkBA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAFA;AADA;AAMA;AAXA;;;;;;;;;;;;AC1CA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}